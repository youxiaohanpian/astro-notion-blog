---
import type { Block } from '../lib/interfaces.ts'

export interface Props {
  headings: Block[]
}

const { headings } = Astro.props

// 生成唯一的ID，用于目录锚点
function slugify(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\u4e00-\u9fa5]+/g, '-') // 支持中文
    .replace(/^-+|-+$/g, '')
}

// 获取标题文本
function getHeadingText(block: Block): string {
  let text = ''
  if (block.Type === 'heading_1' && block.Heading1) {
    text = block.Heading1.RichTexts.map(rt => rt.Text?.Content || '').join('')
  } else if (block.Type === 'heading_2' && block.Heading2) {
    text = block.Heading2.RichTexts.map(rt => rt.Text?.Content || '').join('')
  } else if (block.Type === 'heading_3' && block.Heading3) {
    text = block.Heading3.RichTexts.map(rt => rt.Text?.Content || '').join('')
  }
  return text
}

// 获取标题级别
function getHeadingLevel(block: Block): number {
  if (block.Type === 'heading_1') return 1
  if (block.Type === 'heading_2') return 2
  if (block.Type === 'heading_3') return 3
  return 0
}

// 检查是否有标题
const hasHeadings = headings.length > 0
---

{hasHeadings && (
  <div class="table-of-contents">
    <div class="toc-header">目录</div>
    <nav class="toc-nav">
      <ul class="toc-list">
        {headings.map(heading => {
          const text = getHeadingText(heading)
          const slug = slugify(text)
          const level = getHeadingLevel(heading)
          
          return (
            <li class={`toc-item toc-level-${level}`}>
              <a href={`#${slug}`} class="toc-link">
                {text}
              </a>
            </li>
          )
        })}
      </ul>
    </nav>
  </div>
)}

<style>
  .table-of-contents {
    position: fixed;
    left: 20px;
    top: 80px;
    width: 200px;
    max-height: calc(100vh - 100px);
    overflow-y: auto;
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(230, 230, 230, 0.8);
    font-size: 0.9rem;
    line-height: 1.5;
    z-index: 100;
    transition: all 0.3s ease;
    opacity: 0.95;
  }
  
  .table-of-contents:hover {
    opacity: 1;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .toc-header {
    font-weight: 600;
    margin-bottom: 0.8rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
    color: #444;
    font-size: 0.95rem;
    text-align: center;
  }
  
  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .toc-item {
    margin: 0.4rem 0;
    padding-left: 0;
  }
  
  .toc-level-1 {
    font-weight: 500;
    margin-top: 0.8rem;
  }
  
  .toc-level-2 {
    padding-left: 1rem;
    font-size: 0.85rem;
  }
  
  .toc-level-3 {
    padding-left: 2rem;
    font-size: 0.8rem;
    color: #666;
  }
  
  .toc-link {
    display: block;
    color: #555;
    text-decoration: none;
    padding: 0.3rem 0.5rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .toc-link:hover {
    background-color: rgba(0, 0, 0, 0.03);
    color: #111;
  }
  
  .toc-link.active {
    color: #08c;
    font-weight: 600;
    background-color: rgba(0, 136, 204, 0.05);
  }
  
  /* 自定义滚动条 */
  .table-of-contents::-webkit-scrollbar {
    width: 4px;
  }
  
  .table-of-contents::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 2px;
  }
  
  .table-of-contents::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 2px;
  }
  
  .table-of-contents::-webkit-scrollbar-thumb:hover {
    background: #aaa;
  }
  
  /* 响应式设计 */
  @media (max-width: 1200px) {
    .table-of-contents {
      display: none; /* 在小屏幕上隐藏目录 */
    }
  }
</style>

<script>
  // 高亮当前可见的标题
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        if (entry.isIntersecting) {
          document.querySelectorAll('.toc-link').forEach(link => {
            link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
          });
        }
      });
    }, { rootMargin: '-80px 0px -80% 0px' });

    // 观察所有标题元素
    document.querySelectorAll('h1[id], h2[id], h3[id]').forEach(heading => {
      observer.observe(heading);
    });
    
    // 点击目录链接时平滑滚动
    document.querySelectorAll('.toc-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 100,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script> 