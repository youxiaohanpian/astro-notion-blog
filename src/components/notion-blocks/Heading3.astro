---
import * as interfaces from '../../lib/interfaces.ts'
import { buildHeadingId } from '../../lib/blog-helpers.ts'
import RichText from './RichText.astro'
import NotionBlocks from '../NotionBlocks.astro'

export interface Props {
  block: interfaces.Block
  headings: interfaces.Block[]
}

const { block, headings } = Astro.props

const id = buildHeadingId(block.Heading3)
---

{
  block.Heading3.IsToggleable ? (
    <details class="toggle">
      <summary>
        <a href={`#${id}`} id={id} class="heading-link">
          <h5>
            {block.Heading3.RichTexts.map((richText: interfaces.RichText) => (
              <RichText richText={richText} />
            ))}
          </h5>
        </a>
      </summary>
      <div>
        {block.Heading3.Children && (
          <NotionBlocks blocks={block.Heading3.Children} headings={headings} />
        )}
      </div>
    </details>
  ) : (
    <a href={`#${id}`} id={id} class="heading-link">
      <h5>
        {block.Heading3.RichTexts.map((richText: interfaces.RichText) => (
          <RichText richText={richText} />
        ))}
      </h5>
    </a>
  )
}

<style>
  h5 {
    margin: 1.1em 0 0.5em;
    color: var(--text-color);
    font-size: 1.3rem;
  }
  
  @media (max-width: 640px) {
    h5 {
      font-size: 1.1rem;
    }
  }

  .toggle {
    margin: 1.3rem 0 0;
  }
  
  @media (max-width: 640px) {
    .toggle {
      margin: 1rem 0 0;
    }
  }

  .toggle > summary {
    cursor: pointer;
  }

  .toggle > summary > a {
    display: inline;
  }

  .toggle > summary > a > h5 {
    display: inline;
  }

  .toggle > div {
    margin-left: 1em;
  }
  
  .heading-link {
    color: inherit;
    text-decoration: none;
  }
  
  .heading-link:hover {
    color: var(--primary-color);
    text-decoration: none;
  }
</style>
